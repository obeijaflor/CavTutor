# We use version 2 of Docker Compose
version: '2'

networks:
    frontend:
    backend:

services:
    # The api_handler docker container is supposed to be a reverse proxy that
    # redirects requests to either api_v1 or api_v2 depending on their URL.
    # However, it is not working presently.
    #api_handler:
    #    container_name: api_handler
    #    build:
    #        dockerfile: Dockerfile-nginx-reverse-proxy
    #        context: api/handler
    #    image: nginx-proxy-handler:latest
    #    links:
    #     - api_v1
    #     - api_v2
    #    ports:
    #     - "8003:8003"
    #    volumes:
    #     - ./api/handler:/app
    #
    # A docker container for our API-level Django project.
    #
    # It serves files using Apache's mod_wsgi-express.
    #api_v1:
    #    container_name: api_v1
    #    image: omattei/restful-django
    #
    #    # we want to link to an external mysql docker container
    #    external_links:
    #        - mysql:db
    #    ports:
    #        - "8081:8000"
    #    volumes:
    #        - ./api/v1:/app
    #    command: /app/deploy_server.sh

    # A docker container for our API-level Django project.
    #
    # It serves files using Apache's mod_wsgi-express.
    api_v2:
        container_name: api_v2
        build:
            dockerfile: Dockerfile-restful-django
            context: build
        image: restful-django
        networks:
            - backend
        # we want to link to an external mysql docker container
        external_links:
            - mysql:db
        ports:
            # - "8082:8000"
             - "8003:8000"
        volumes:
            - ./api/v2:/app
        command: /app/deploy_server.sh

    # A docker container for our user experience-level Django project.
    #
    # It serves files using Apache's mod_wsgi-express.
    ux:
        container_name: ux
        image: restful-django
        depends_on:
            - kafka
            - elasticsearch
            - api_v2
            - search_controller
        links:
            - api_v2:api
        networks:
            - backend
            - frontend
        ports:
            - "8001:8000"
        volumes:
            - ./ux:/app
        command: /app/deploy_server.sh

    # A docker container for our web-facing Django project.
    #
    # It serves files using Apache's mod_wsgi-express.
    www:
        container_name: www
        image: restful-django
        depends_on:
            - ux
        networks:
            - frontend
        ports:
            - "8000:8000"
        volumes:
            - ./www:/app
        command: /app/deploy_server.sh

    # A docker container for our web-level static files
    #       (e.g. stylesheets, images, JavaScript)
    #
    # It serves files using the lightweight web server lighttpd.
    #
    # In production, this would be served up on a separate
    # domain/server, but for development we will spin up
    # this server on a separate port.
    www_static:
        container_name: www_static
        image: sebp/lighttpd
        networks:
            - frontend
        volumes:
            - ./www/static:/var/www/localhost/htdocs/static
        ports:
            - "8081:80"



    # A docker container for our API-level static files
    #       (e.g. stylesheets, images, JavaScript)
    #
    # It serves files using the lightweight web server lighttpd.
    #
    # In production, this would be served up on a separate
    # domain/server, but for development we will spin up
    # this server on a separate port.
    api_static:
        container_name: api_static
        image: sebp/lighttpd
        networks:
            - backend
        volumes:
            - ./api/static:/var/www/localhost/htdocs/static
        ports:
            - "8080:80"

    kafka:
        image: spotify/kafka
        container_name: kafka
        networks:
            - backend
        environment:
            ADVERTISED_HOST: kafka
            ADVERTISED_PORT: 9092
        hostname: kafka

    elasticsearch:
        image: elasticsearch:2.0
        container_name: elasticsearch
        networks:
            - backend
        ports:
            - "9200:9200"

    search_controller:
        image: restful-django
        networks:
            - backend
        container_name: search_controller
        depends_on:
            - kafka
            - elasticsearch
        volumes:
            - ./search:/app
        command: /app/dispatch.sh
